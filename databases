/**Creating a table**/

/* Grocery list:
Bananas (4)
Peanut Butter (1)
Dark Chocolate Bars (2)
**/

CREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER );
INSERT INTO groceries VALUES (1, "Bananas", 4);
INSERT INTO groceries VALUES (2, "Peanut Butter", 1);
INSERT INTO groceries VALUES (3, "Dark chocolate bars", 2);
SELECT * FROM groceries;

/* What are your favourite books? You can make a database table to store them
in! In this first step, create a table to store your list of books.
It should have columns for `id`, `name`, and `rating` */


CREATE TABLE books (id INTEGER PRIMARY KEY, name TEXT, rating NUMERIC);

INSERT INTO books VALUES (1, "The Alchemist", 10);
INSERT INTO books VALUES (2, "The Little Prince", 8);
INSERT INTO books VALUES (3, "Egg Shell Skull", 7);
SELECT * FROM books;


/* Querying the table */
CREATE TABLE groceries (id INTEGER PRIMARY KEY, item TEXT, quantity INTEGER, aisle INTEGER);
INSERT INTO groceries VALUES (1, "Bananas", 4, 7);
INSERT INTO groceries VALUES(2, "Peanut Butter", 1, 2);
INSERT INTO groceries VALUES(3, "Dark Chocolate Bars", 2, 2);
INSERT INTO groceries VALUES(4, "Ice cream", 1, 12);
INSERT INTO groceries VALUES(5, "Cherries", 1, 2);
INSERT INTO groceries VALUES(6, "Chocolate syrup", 0, 4);

SELECT * FROM groceries WHERE aisle > 5 ORDER BY aisle;


/* This database contains an incomplete list of box office hits and their
release year. In this challenge, you're going to get the results back out of the
database in different ways! In this first step, just select all the movies */


CREATE TABLE movies (id INTEGER PRIMARY KEY, name TEXT, release_year INTEGER);
INSERT INTO movies VALUES (1, "Avatar", 2009);
INSERT INTO movies VALUES (2, "Titanic", 1997);
INSERT INTO movies VALUES (3, "Star Wars: Episode IV - A New Hope", 1977);
INSERT INTO movies VALUES (4, "Shrek 2", 2004);
INSERT INTO movies VALUES (5, "The Lion King", 1994);
INSERT INTO movies VALUES (6, "Disney's Up", 2009);

 SELECT * FROM movies;
 SELECT * FROM movies WHERE release_year > 1999 ORDER BY release_year;


/* Aggregating data */


CREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, aisle INTEGER);
INSERT INTO groceries VALUES (1, "Bananas", 56, 7);
INSERT INTO groceries VALUES(2, "Peanut Butter", 1, 2);
INSERT INTO groceries VALUES(3, "Dark Chocolate Bars", 2, 2);
INSERT INTO groceries VALUES(4, "Ice cream", 1, 12);
INSERT INTO groceries VALUES(5, "Cherries", 6, 2);
INSERT INTO groceries VALUES(6, "Chocolate syrup", 1, 4);

SELECT aisle, SUM(quantity) FROM groceries GROUP BY aisle;


/* Here's a table containing a TODO list with the number of minutes it will take
to complete each item. Insert another item to your todo list with the estimated
minutes it will take */


CREATE TABLE todo_list (id INTEGER PRIMARY KEY, item TEXT, minutes INTEGER);
INSERT INTO todo_list VALUES (1, "Wash the dishes", 15);
INSERT INTO todo_list VALUES (2, "vacuuming", 20);
INSERT INTO todo_list VALUES (3, "Learn some stuff on KA", 30);
INSERT INTO todo_list VALUES (4, "Fold laundry", 15);
SELECT SUM(minutes) FROM todo_list


/* Project: Design a Database

Create your own store! Your store should sell one type of things, like clothing
or bikes, whatever you want your store to specialise in. You should have a table
for all the items in your store, and at least 5 columns for the kind of data you
think you'd need to store. You should sell at least 15 items, and use select
statements to order your items by price and show at least one statistic about
the items */

CREATE TABLE tufting_store (id INTEGER PRIMARY KEY, item TEXT, price NUMERIC, stock INTEGER, made NUMERIC);
INSERT INTO tufting_store VALUES (1, "large round rug", 200, 10, 2022);
INSERT INTO tufting_store VALUES (2, "medium round rug", 150, 7, 2023);
INSERT INTO tufting_store VALUES (3, "small round rug", 100, 20, 2022);
INSERT INTO tufting_store VALUES (4, "vase cover", 200, 3, 2023);
INSERT INTO tufting_store VALUES (5, "coster set x6", 100, 9, 2023);
INSERT INTO tufting_store VALUES (6, "coster set x4", 80, 4, 2022);
INSERT INTO tufting_store VALUES (7, "coster set x8", 120, 8, 2023);
INSERT INTO tufting_store VALUES (8, "large rectangle rug", 200, 8, 2023);
INSERT INTO tufting_store VALUES (9, "medium rectangle rug", 150, 9, 2022);
INSERT INTO tufting_store VALUES (10, "small rectangle rug", 100, 8, 2023);
INSERT INTO tufting_store VALUES (11, "small custom rug", 100, 0, 2023);
INSERT INTO tufting_store VALUES (12, "medium custom rug", 150, 0, 2023);
INSERT INTO tufting_store VALUES (13, "large custom rug", 200, 0, 2023);
INSERT INTO tufting_store VALUES (14, "large wall hang", 250, 2, 2023);
INSERT INTO tufting_store VALUES (15, "medium wall hang", 150, 6, 2023);

SELECT item, price, stock FROM tufting_store ORDER BY price;
SELECT SUM(stock) FROM tufting_store;
